1.1.5. Processing

DispatcherServlet 은 request 들을 다음과 같이 처리한다.

1
WebApplicationContext 가 검색되고, 
요청 처리 과정에 있는 Controller 와 다른 요소들이 사용할 수 있는 속성으로 해당 request 에 연결된다. 
WebApplicationContext 는 기본적으로 DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE 키로 연결된다.  

2
Locale resolver 가 해당 request 에 연결된다. 
요청 처리 과정에 있는 요소들이 해당 request 를 처리할 때 사용할 locale 을 resolve 하게 하기 위함이다.
Request 에는 ‘뷰 렌더링’, ‘데이터 준비’ 등이 있다. 

3
Theme resolver 가 해당 request 에 연결된다.
 View 와 같은 요소들이 어떤 theme 을 사용해야할지 결정하도록 하기 위함이다.
만약 theme 을 사용하지 않는다면, 이 부분은 무시해도 된다.

4
Multipart file resolver 를 명시한다면, 해당 request 는 multipart 들에 대해 검사를 받는다. 
Multiparts 가 발견되면, 해당 request 는 MultipartHttpServletRequest 로 감싸진다. 
요청 처리 과정 내에 있는 다른 요소들에 의해 이후에 처리되기 위함이다.

5
적합한 handler 가 검색된다. 
Handler 를 찾으면, Model 또는 랜더링을 준비하기 위해서, handler 와 연관된 execution chain 이 실행된다. 
( execution chain 에는 preprocessors, post processors, controllers 가 있다. )
대신, Annotate 된 controllers 들에게는, view 를 반환하는 대신, HandlerAdapter 안에 response 가 전달된다.

6
Model 이 반환되면, view 가 그려진다. 
Model 이 반환되지 않거나 ( 이런 경우는 request 에 끼여드는 preprocessor 나 postprocessor 때문일 것이다. 아마 보안상 이유 때문일 것이다. )
View 가 그려지지 않는다면,
Request 가 이미 수행을 끝냈기 때문이다.



WebApplicationContext 에 선언된 HandlerExceptionResolver 빈들은
Request 가 처리되는 동안 발생된 exception 들을 resolve 하기 위해서 사용한다.
이런 exception resolver 들은 exception 들을 설명하기 위해서 로직을 커스터마이징할 수 있게 한다.
Exception 에 대해 더 알고 싶다면 1.1.7. Exceptions 를 참고하자.

스프링 DispatcherServlet 은, Servlet API 에 명시된 것 처럼, last-modification-date 반환하도록 지원한다.
특정 request 에 대한 last modification date 를 결정하는 처리 과정은 간단하다(?) : 
DispatcherServlet 은 적절한 handler mapping 을 찾고, 찾아진 handler 가 LastModified 인터페이스를 구현하는지 여부를 테스트한다. 
handler 가 LastModified 인터페이스를 구현하고 있다면, 
LastModified 인터페이스의 long getLastModified(request) 메소드의 값을 client 에게 반환한다.

우리는, web.xml 파일 안에 servlet 선언부에 servlet initialization 파라미터들 ( init-params elements) 을 추가해서, 
개별 DispatcherServlet 인스턴스들을 커스터마이징할 수 있다. 
아래 테이블은 지원하는 파라미터들을 열거한다.

| 파라미터 | 설명 |
| --- | --- |
| contextClass | ConfigurableWebApplicationContext 를 구현하는 클래스. 인스턴스화되고, 해당 servlet 에 의해 지역적으로 설정된다. 기본적으로 XmlWebApplicationContext 를 사용한다. |
| contextConfigLocation | Context 인스턴스로 전달되는 string. contextClass 에 의해 결정된다. Context 들을 찾을 수 있는 곳을 나타낸다. string 은 multiple context 들을 지원하기 위해서, ( , 를 구분자로 사용하는 ) multiple string 들로 구성될 수 있다. 
두 번 정의된 빈들이 있는 multiple context locations 의 경우, 가장 뒤에 location 이 먼저 채택된다. |
